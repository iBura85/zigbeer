'use strict';
const { zclId } = require("./zclId")

describe("#._getCluster", () => {
  it("should be a function", () => {
    expect(typeof zclId._getCluster).toBe("function")
  })
})

describe("#.profile", () => {
  it("should be a function", () => {
    expect(typeof zclId.profile).toBe("function")
  })

  it("should throw TypeError if input profId is not a number and not a string", () => {
    expect(() => zclId.profile()).toThrowError(TypeError)
    expect(() => zclId.profile(undefined)).toThrowError(TypeError)
    expect(() => zclId.profile(null)).toThrowError(TypeError)
    expect(() => zclId.profile(NaN)).toThrowError(TypeError)
    expect(() => zclId.profile([])).toThrowError(TypeError)
    expect(() => zclId.profile({})).toThrowError(TypeError)
    expect(() => zclId.profile(true)).toThrowError(TypeError)
    expect(() => zclId.profile(new Date())).toThrowError(TypeError)
    expect(() => zclId.profile(() => {})).toThrowError(TypeError)

    expect(() => zclId.profile(260)).not.toThrowError(Error)
    expect(() => zclId.profile("260")).not.toThrowError(Error)
    expect(() => zclId.profile(0x0104)).not.toThrowError(Error)
    expect(() => zclId.profile("0x0104")).not.toThrowError(Error)
    expect(() => zclId.profile("HA")).not.toThrowError(Error)
  })
})

describe("#.device", () => {
  it("should be a function", () => {
    expect(typeof zclId.device).toBe("function")
  })

  it("should throw TypeError if input profId is not a number and not a string", () => {
    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device(undefined, 5)).toThrowError(TypeError)
    expect(() => zclId.device(null, 5)).toThrowError(TypeError)
    expect(() => zclId.device(NaN, 5)).toThrowError(TypeError)
    expect(() => zclId.device([], 5)).toThrowError(TypeError)
    expect(() => zclId.device({}, 5)).toThrowError(TypeError)
    expect(() => zclId.device(true, 5)).toThrowError(TypeError)
    expect(() => zclId.device(new Date(), 5)).toThrowError(TypeError)
    expect(() => zclId.device(() => {}, 5)).toThrowError(TypeError)

    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device(undefined, "5")).toThrowError(TypeError)
    expect(() => zclId.device(null, "5")).toThrowError(TypeError)
    expect(() => zclId.device(NaN, "5")).toThrowError(TypeError)
    expect(() => zclId.device([], "5")).toThrowError(TypeError)
    expect(() => zclId.device({}, "5")).toThrowError(TypeError)
    expect(() => zclId.device(true, "5")).toThrowError(TypeError)
    expect(() => zclId.device(new Date(), "5")).toThrowError(TypeError)
    expect(() => zclId.device(() => {}, "5")).toThrowError(TypeError)

    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device(undefined, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.device(null, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.device(NaN, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.device([], 0x0005)).toThrowError(TypeError)
    expect(() => zclId.device({}, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.device(true, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.device(new Date(), 0x0005)).toThrowError(TypeError)
    expect(() => zclId.device(() => {}, 0x0005)).toThrowError(TypeError)

    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device(undefined, "CONFIGURATION_TOOL")).toThrowError(TypeError)
    expect(() => zclId.device(null, "CONFIGURATION_TOOL")).toThrowError(TypeError)
    expect(() => zclId.device(NaN, "CONFIGURATION_TOOL")).toThrowError(TypeError)
    expect(() => zclId.device([], "CONFIGURATION_TOOL")).toThrowError(TypeError)
    expect(() => zclId.device({}, "CONFIGURATION_TOOL")).toThrowError(TypeError)
    expect(() => zclId.device(true, "CONFIGURATION_TOOL")).toThrowError(TypeError)
    expect(() => zclId.device(new Date(), "CONFIGURATION_TOOL")).toThrowError(TypeError)
    expect(() => zclId.device(() => {}, "CONFIGURATION_TOOL")).toThrowError(TypeError)

    expect(() => zclId.device(260, 5)).not.toThrowError(Error)
    expect(() => zclId.device(260, "5")).not.toThrowError(Error)
    expect(() => zclId.device(260, 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device(260, "CONFIGURATION_TOOL")).not.toThrowError(Error)
    expect(() => zclId.device("260", 5)).not.toThrowError(Error)
    expect(() => zclId.device("260", "5")).not.toThrowError(Error)
    expect(() => zclId.device("260", 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device("260", "CONFIGURATION_TOOL")).not.toThrowError(Error)
    expect(() => zclId.device(0x104, 5)).not.toThrowError(Error)
    expect(() => zclId.device(0x104, "5")).not.toThrowError(Error)
    expect(() => zclId.device(0x104, 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device(0x104, "CONFIGURATION_TOOL")).not.toThrowError(Error)
    expect(() => zclId.device("HA", 5)).not.toThrowError(Error)
    expect(() => zclId.device("HA", "5")).not.toThrowError(Error)
    expect(() => zclId.device("HA", 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device("HA", "CONFIGURATION_TOOL")).not.toThrowError(Error)
  })

  it("should throw TypeError if input devId is not a number and not a string", () => {
    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device(260, undefined)).toThrowError(TypeError)
    expect(() => zclId.device(260, null)).toThrowError(TypeError)
    expect(() => zclId.device(260, NaN)).toThrowError(TypeError)
    expect(() => zclId.device(260, [])).toThrowError(TypeError)
    expect(() => zclId.device(260, {})).toThrowError(TypeError)
    expect(() => zclId.device(260, true)).toThrowError(TypeError)
    expect(() => zclId.device(260, new Date())).toThrowError(TypeError)
    expect(() => zclId.device(260, () => {})).toThrowError(TypeError)

    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device("260", undefined)).toThrowError(TypeError)
    expect(() => zclId.device("260", null)).toThrowError(TypeError)
    expect(() => zclId.device("260", NaN)).toThrowError(TypeError)
    expect(() => zclId.device("260", [])).toThrowError(TypeError)
    expect(() => zclId.device("260", {})).toThrowError(TypeError)
    expect(() => zclId.device("260", true)).toThrowError(TypeError)
    expect(() => zclId.device("260", new Date())).toThrowError(TypeError)
    expect(() => zclId.device("260", () => {})).toThrowError(TypeError)

    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, undefined)).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, null)).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, NaN)).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, [])).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, {})).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, true)).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, new Date())).toThrowError(TypeError)
    expect(() => zclId.device(0x0104, () => {})).toThrowError(TypeError)

    expect(() => zclId.device()).toThrowError(TypeError)
    expect(() => zclId.device("HA", undefined)).toThrowError(TypeError)
    expect(() => zclId.device("HA", null)).toThrowError(TypeError)
    expect(() => zclId.device("HA", NaN)).toThrowError(TypeError)
    expect(() => zclId.device("HA", [])).toThrowError(TypeError)
    expect(() => zclId.device("HA", {})).toThrowError(TypeError)
    expect(() => zclId.device("HA", true)).toThrowError(TypeError)
    expect(() => zclId.device("HA", new Date())).toThrowError(TypeError)
    expect(() => zclId.device("HA", () => {})).toThrowError(TypeError)

    expect(() => zclId.device(260, 5)).not.toThrowError(Error)
    expect(() => zclId.device(260, "5")).not.toThrowError(Error)
    expect(() => zclId.device(260, 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device(260, "CONFIGURATION_TOOL")).not.toThrowError(Error)
    expect(() => zclId.device("260", 5)).not.toThrowError(Error)
    expect(() => zclId.device("260", "5")).not.toThrowError(Error)
    expect(() => zclId.device("260", 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device("260", "CONFIGURATION_TOOL")).not.toThrowError(Error)
    expect(() => zclId.device(0x104, 5)).not.toThrowError(Error)
    expect(() => zclId.device(0x104, "5")).not.toThrowError(Error)
    expect(() => zclId.device(0x104, 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device(0x104, "CONFIGURATION_TOOL")).not.toThrowError(Error)
    expect(() => zclId.device("HA", 5)).not.toThrowError(Error)
    expect(() => zclId.device("HA", "5")).not.toThrowError(Error)
    expect(() => zclId.device("HA", 0x0005)).not.toThrowError(Error)
    expect(() => zclId.device("HA", "CONFIGURATION_TOOL")).not.toThrowError(Error)
  })
})

describe("#.cluster", () => {
  it("should be a function", () => {
    expect(typeof zclId.cluster).toBe("function")
  })

  it("should throw TypeError if input cId is not a number and not a string", () => {
    expect(() => zclId.cluster()).toThrowError(TypeError)
    expect(() => zclId.cluster(undefined)).toThrowError(TypeError)
    expect(() => zclId.cluster(null)).toThrowError(TypeError)
    expect(() => zclId.cluster(NaN)).toThrowError(TypeError)
    expect(() => zclId.cluster([])).toThrowError(TypeError)
    expect(() => zclId.cluster({})).toThrowError(TypeError)
    expect(() => zclId.cluster(true)).toThrowError(TypeError)
    expect(() => zclId.cluster(new Date())).toThrowError(TypeError)
    expect(() => zclId.cluster(() => {})).toThrowError(TypeError)

    expect(() => zclId.cluster(3)).not.toThrowError(Error)
    expect(() => zclId.cluster("3")).not.toThrowError(Error)
    expect(() => zclId.cluster(0x0003)).not.toThrowError(Error)
    expect(() => zclId.cluster("0x0003")).not.toThrowError(Error)
    expect(() => zclId.cluster("genIdentify")).not.toThrowError(Error)
  })
})

describe("#.foundation", () => {
  it("should be a function", () => {
    expect(typeof zclId.foundation).toBe("function")
  })

  it("should throw TypeError if input cmdId is not a number and not a string", () => {
    expect(() => zclId.foundation()).toThrowError(TypeError)
    expect(() => zclId.foundation(undefined)).toThrowError(TypeError)
    expect(() => zclId.foundation(null)).toThrowError(TypeError)
    expect(() => zclId.foundation(NaN)).toThrowError(TypeError)
    expect(() => zclId.foundation([])).toThrowError(TypeError)
    expect(() => zclId.foundation({})).toThrowError(TypeError)
    expect(() => zclId.foundation(true)).toThrowError(TypeError)
    expect(() => zclId.foundation(new Date())).toThrowError(TypeError)
    expect(() => zclId.foundation(() => {})).toThrowError(TypeError)

    expect(() => zclId.foundation(3)).not.toThrowError(Error)
    expect(() => zclId.foundation("3")).not.toThrowError(Error)
    expect(() => zclId.foundation(0x0003)).not.toThrowError(Error)
    expect(() => zclId.foundation("0x0003")).not.toThrowError(Error)
    expect(() => zclId.foundation("writeUndiv")).not.toThrowError(Error)
  })
})

describe("#.functional", () => {
  it("should be a function", () => {
    expect(typeof zclId.functional).toBe("function")
  })

  it("should throw TypeError if input cId is not a number and not a string", () => {
    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional(undefined, 5)).toThrowError(TypeError)
    expect(() => zclId.functional(null, 5)).toThrowError(TypeError)
    expect(() => zclId.functional(NaN, 5)).toThrowError(TypeError)
    expect(() => zclId.functional([], 5)).toThrowError(TypeError)
    expect(() => zclId.functional({}, 5)).toThrowError(TypeError)
    expect(() => zclId.functional(true, 5)).toThrowError(TypeError)
    expect(() => zclId.functional(new Date(), 5)).toThrowError(TypeError)
    expect(() => zclId.functional(() => {}, 5)).toThrowError(TypeError)

    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional(undefined, "5")).toThrowError(TypeError)
    expect(() => zclId.functional(null, "5")).toThrowError(TypeError)
    expect(() => zclId.functional(NaN, "5")).toThrowError(TypeError)
    expect(() => zclId.functional([], "5")).toThrowError(TypeError)
    expect(() => zclId.functional({}, "5")).toThrowError(TypeError)
    expect(() => zclId.functional(true, "5")).toThrowError(TypeError)
    expect(() => zclId.functional(new Date(), "5")).toThrowError(TypeError)
    expect(() => zclId.functional(() => {}, "5")).toThrowError(TypeError)

    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional(undefined, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.functional(null, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.functional(NaN, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.functional([], 0x0005)).toThrowError(TypeError)
    expect(() => zclId.functional({}, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.functional(true, 0x0005)).toThrowError(TypeError)
    expect(() => zclId.functional(new Date(), 0x0005)).toThrowError(TypeError)
    expect(() => zclId.functional(() => {}, 0x0005)).toThrowError(TypeError)

    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional(undefined, "writeNoRsp")).toThrowError(TypeError)
    expect(() => zclId.functional(null, "writeNoRsp")).toThrowError(TypeError)
    expect(() => zclId.functional(NaN, "writeNoRsp")).toThrowError(TypeError)
    expect(() => zclId.functional([], "writeNoRsp")).toThrowError(TypeError)
    expect(() => zclId.functional({}, "writeNoRsp")).toThrowError(TypeError)
    expect(() => zclId.functional(true, "writeNoRsp")).toThrowError(TypeError)
    expect(() => zclId.functional(new Date(), "writeNoRsp")).toThrowError(TypeError)
    expect(() => zclId.functional(() => {}, "writeNoRsp")).toThrowError(TypeError)

    expect(() => zclId.functional(5, 5)).not.toThrowError(Error)
    expect(() => zclId.functional(5, "5")).not.toThrowError(Error)
    expect(() => zclId.functional(5, 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional(5, "recall")).not.toThrowError(Error)
    expect(() => zclId.functional("5", 5)).not.toThrowError(Error)
    expect(() => zclId.functional("5", "5")).not.toThrowError(Error)
    expect(() => zclId.functional("5", 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional("5", "recall")).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, 5)).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, "5")).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, "recall")).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", 5)).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", "5")).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", "recall")).not.toThrowError(Error)
  })

  it("should throw TypeError if input cmdId is not a number and not a string", () => {
    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional(5, undefined)).toThrowError(TypeError)
    expect(() => zclId.functional(5, null)).toThrowError(TypeError)
    expect(() => zclId.functional(5, NaN)).toThrowError(TypeError)
    expect(() => zclId.functional(5, [])).toThrowError(TypeError)
    expect(() => zclId.functional(5, {})).toThrowError(TypeError)
    expect(() => zclId.functional(5, true)).toThrowError(TypeError)
    expect(() => zclId.functional(5, new Date())).toThrowError(TypeError)
    expect(() => zclId.functional(5, () => {})).toThrowError(TypeError)

    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional("5", undefined)).toThrowError(TypeError)
    expect(() => zclId.functional("5", null)).toThrowError(TypeError)
    expect(() => zclId.functional("5", NaN)).toThrowError(TypeError)
    expect(() => zclId.functional("5", [])).toThrowError(TypeError)
    expect(() => zclId.functional("5", {})).toThrowError(TypeError)
    expect(() => zclId.functional("5", true)).toThrowError(TypeError)
    expect(() => zclId.functional("5", new Date())).toThrowError(TypeError)
    expect(() => zclId.functional("5", () => {})).toThrowError(TypeError)

    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, undefined)).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, null)).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, NaN)).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, [])).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, {})).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, true)).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, new Date())).toThrowError(TypeError)
    expect(() => zclId.functional(0x0005, () => {})).toThrowError(TypeError)

    expect(() => zclId.functional()).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", undefined)).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", null)).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", NaN)).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", [])).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", {})).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", true)).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", new Date())).toThrowError(TypeError)
    expect(() => zclId.functional("genScenes", () => {})).toThrowError(TypeError)

    expect(() => zclId.functional(5, 5)).not.toThrowError(Error)
    expect(() => zclId.functional(5, "5")).not.toThrowError(Error)
    expect(() => zclId.functional(5, 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional(5, "recall")).not.toThrowError(Error)
    expect(() => zclId.functional("5", 5)).not.toThrowError(Error)
    expect(() => zclId.functional("5", "5")).not.toThrowError(Error)
    expect(() => zclId.functional("5", 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional("5", "recall")).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, 5)).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, "5")).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional(0x0005, "recall")).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", 5)).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", "5")).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", 0x05)).not.toThrowError(Error)
    expect(() => zclId.functional("genScenes", "recall")).not.toThrowError(Error)
  })
})

describe("#.getCmdRsp", () => {
  it("should be a function", () => {
    expect(typeof zclId.getCmdRsp).toBe("function")
  })

  it("should throw TypeError if input cId is not a number and not a string", () => {
    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(undefined, 0)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(null, 0)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(NaN, 0)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp([], 0)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp({}, 0)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(true, 0)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(new Date(), 0)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(() => {}, 0)).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(undefined, "0")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(null, "0")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(NaN, "0")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp([], "0")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp({}, "0")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(true, "0")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(new Date(), "0")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(() => {}, "0")).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(undefined, 0x00)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(null, 0x00)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(NaN, 0x00)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp([], 0x00)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp({}, 0x00)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(true, 0x00)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(new Date(), 0x00)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(() => {}, 0x00)).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(undefined, "Rsp")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(null, "Rsp")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(NaN, "Rsp")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp([], "Rsp")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp({}, "Rsp")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(true, "Rsp")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(new Date(), "Rsp")).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(() => {}, "Rsp")).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp(5, 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(5, "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(5, 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(5, "Rsp")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", "Rsp")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, "Rsp")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", "Rsp")).not.toThrowError(Error)
  })

  it("should throw TypeError if input rspId is not a number and not a string", () => {
    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, undefined)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, null)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, NaN)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, [])).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, {})).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, true)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, new Date())).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(5, () => {})).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", undefined)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", null)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", NaN)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", [])).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", {})).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", true)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", new Date())).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("5", () => {})).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, undefined)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, null)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, NaN)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, [])).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, {})).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, true)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, new Date())).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp(0x0005, () => {})).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp()).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", undefined)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", null)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", NaN)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", [])).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", {})).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", true)).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", new Date())).toThrowError(TypeError)
    expect(() => zclId.getCmdRsp("genScenes", () => {})).toThrowError(TypeError)

    expect(() => zclId.getCmdRsp(5, 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(5, "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(5, 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(5, "Rsp")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("5", "Rsp")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp(0x0005, "Rsp")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", 0)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", "0")).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", 0x00)).not.toThrowError(Error)
    expect(() => zclId.getCmdRsp("genScenes", "Rsp")).not.toThrowError(Error)
  })
})

describe("#.attrList", () => {
  it("should be a function", () => {
    expect(typeof zclId.attrList).toBe("function")
  })

  it("should throw TypeError if input cId is not a number and not a string", () => {
    expect(() => zclId.attrList()).toThrowError(TypeError)
    expect(() => zclId.attrList(undefined)).toThrowError(TypeError)
    expect(() => zclId.attrList(null)).toThrowError(TypeError)
    expect(() => zclId.attrList(NaN)).toThrowError(TypeError)
    expect(() => zclId.attrList([])).toThrowError(TypeError)
    expect(() => zclId.attrList({})).toThrowError(TypeError)
    expect(() => zclId.attrList(true)).toThrowError(TypeError)
    expect(() => zclId.attrList(new Date())).toThrowError(TypeError)
    expect(() => zclId.attrList(() => {})).toThrowError(TypeError)

    expect(() => zclId.attrList(3)).not.toThrowError(Error)
    expect(() => zclId.attrList("3")).not.toThrowError(Error)
    expect(() => zclId.attrList(0x0003)).not.toThrowError(Error)
    expect(() => zclId.attrList("0x0003")).not.toThrowError(Error)
    expect(() => zclId.attrList("genIdentify")).not.toThrowError(Error)
  })
})

describe("#.attr", () => {
  it("should be a function", () => {
    expect(typeof zclId.attr).toBe("function")
  })

  it("should throw TypeError if input cId is not a number and not a string", () => {
    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr(undefined, 2)).toThrowError(TypeError)
    expect(() => zclId.attr(null, 2)).toThrowError(TypeError)
    expect(() => zclId.attr(NaN, 2)).toThrowError(TypeError)
    expect(() => zclId.attr([], 2)).toThrowError(TypeError)
    expect(() => zclId.attr({}, 2)).toThrowError(TypeError)
    expect(() => zclId.attr(true, 2)).toThrowError(TypeError)
    expect(() => zclId.attr(new Date(), 2)).toThrowError(TypeError)
    expect(() => zclId.attr(() => {}, 2)).toThrowError(TypeError)

    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr(undefined, "2")).toThrowError(TypeError)
    expect(() => zclId.attr(null, "2")).toThrowError(TypeError)
    expect(() => zclId.attr(NaN, "2")).toThrowError(TypeError)
    expect(() => zclId.attr([], "2")).toThrowError(TypeError)
    expect(() => zclId.attr({}, "2")).toThrowError(TypeError)
    expect(() => zclId.attr(true, "2")).toThrowError(TypeError)
    expect(() => zclId.attr(new Date(), "2")).toThrowError(TypeError)
    expect(() => zclId.attr(() => {}, "2")).toThrowError(TypeError)

    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr(undefined, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attr(null, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attr(NaN, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attr([], 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attr({}, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attr(true, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attr(new Date(), 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attr(() => {}, 0x0002)).toThrowError(TypeError)

    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr(undefined, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attr(null, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attr(NaN, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attr([], "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attr({}, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attr(true, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attr(new Date(), "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attr(() => {}, "currentGroup")).toThrowError(TypeError)

    expect(() => zclId.attr(5, 2)).not.toThrowError(Error)
    expect(() => zclId.attr(5, "2")).not.toThrowError(Error)
    expect(() => zclId.attr(5, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr(5, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attr("5", 2)).not.toThrowError(Error)
    expect(() => zclId.attr("5", "2")).not.toThrowError(Error)
    expect(() => zclId.attr("5", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr("5", "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, 2)).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, "2")).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", 2)).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", "2")).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", "currentGroup")).not.toThrowError(Error)
  })

  it("should throw TypeError if input attrId is not a number and not a string", () => {
    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr(5, undefined)).toThrowError(TypeError)
    expect(() => zclId.attr(5, null)).toThrowError(TypeError)
    expect(() => zclId.attr(5, NaN)).toThrowError(TypeError)
    expect(() => zclId.attr(5, [])).toThrowError(TypeError)
    expect(() => zclId.attr(5, {})).toThrowError(TypeError)
    expect(() => zclId.attr(5, true)).toThrowError(TypeError)
    expect(() => zclId.attr(5, new Date())).toThrowError(TypeError)
    expect(() => zclId.attr(5, () => {})).toThrowError(TypeError)

    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr("5", undefined)).toThrowError(TypeError)
    expect(() => zclId.attr("5", null)).toThrowError(TypeError)
    expect(() => zclId.attr("5", NaN)).toThrowError(TypeError)
    expect(() => zclId.attr("5", [])).toThrowError(TypeError)
    expect(() => zclId.attr("5", {})).toThrowError(TypeError)
    expect(() => zclId.attr("5", true)).toThrowError(TypeError)
    expect(() => zclId.attr("5", new Date())).toThrowError(TypeError)
    expect(() => zclId.attr("5", () => {})).toThrowError(TypeError)

    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, undefined)).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, null)).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, NaN)).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, [])).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, {})).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, true)).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, new Date())).toThrowError(TypeError)
    expect(() => zclId.attr(0x0005, () => {})).toThrowError(TypeError)

    expect(() => zclId.attr()).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", undefined)).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", null)).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", NaN)).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", [])).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", {})).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", true)).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", new Date())).toThrowError(TypeError)
    expect(() => zclId.attr("genScenes", () => {})).toThrowError(TypeError)

    expect(() => zclId.attr(5, 2)).not.toThrowError(Error)
    expect(() => zclId.attr(5, "2")).not.toThrowError(Error)
    expect(() => zclId.attr(5, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr(5, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attr("5", 2)).not.toThrowError(Error)
    expect(() => zclId.attr("5", "2")).not.toThrowError(Error)
    expect(() => zclId.attr("5", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr("5", "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, 2)).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, "2")).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr(0x0005, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", 2)).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", "2")).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attr("genScenes", "currentGroup")).not.toThrowError(Error)
  })
})

describe("#.attrType", () => {
  it("should be a function", () => {
    expect(typeof zclId.attrType).toBe("function")
  })

  it("should throw TypeError if input cId is not a number and not a string", () => {
    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType(undefined, 2)).toThrowError(TypeError)
    expect(() => zclId.attrType(null, 2)).toThrowError(TypeError)
    expect(() => zclId.attrType(NaN, 2)).toThrowError(TypeError)
    expect(() => zclId.attrType([], 2)).toThrowError(TypeError)
    expect(() => zclId.attrType({}, 2)).toThrowError(TypeError)
    expect(() => zclId.attrType(true, 2)).toThrowError(TypeError)
    expect(() => zclId.attrType(new Date(), 2)).toThrowError(TypeError)
    expect(() => zclId.attrType(() => {}, 2)).toThrowError(TypeError)

    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType(undefined, "2")).toThrowError(TypeError)
    expect(() => zclId.attrType(null, "2")).toThrowError(TypeError)
    expect(() => zclId.attrType(NaN, "2")).toThrowError(TypeError)
    expect(() => zclId.attrType([], "2")).toThrowError(TypeError)
    expect(() => zclId.attrType({}, "2")).toThrowError(TypeError)
    expect(() => zclId.attrType(true, "2")).toThrowError(TypeError)
    expect(() => zclId.attrType(new Date(), "2")).toThrowError(TypeError)
    expect(() => zclId.attrType(() => {}, "2")).toThrowError(TypeError)

    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType(undefined, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attrType(null, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attrType(NaN, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attrType([], 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attrType({}, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attrType(true, 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attrType(new Date(), 0x0002)).toThrowError(TypeError)
    expect(() => zclId.attrType(() => {}, 0x0002)).toThrowError(TypeError)

    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType(undefined, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attrType(null, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attrType(NaN, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attrType([], "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attrType({}, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attrType(true, "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attrType(new Date(), "currentGroup")).toThrowError(TypeError)
    expect(() => zclId.attrType(() => {}, "currentGroup")).toThrowError(TypeError)

    expect(() => zclId.attrType(5, 2)).not.toThrowError(Error)
    expect(() => zclId.attrType(5, "2")).not.toThrowError(Error)
    expect(() => zclId.attrType(5, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType(5, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attrType("5", 2)).not.toThrowError(Error)
    expect(() => zclId.attrType("5", "2")).not.toThrowError(Error)
    expect(() => zclId.attrType("5", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType("5", "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, 2)).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, "2")).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", 2)).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", "2")).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", "currentGroup")).not.toThrowError(Error)
  })

  it("should throw TypeError if input attrId is not a number and not a string", () => {
    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType(5, undefined)).toThrowError(TypeError)
    expect(() => zclId.attrType(5, null)).toThrowError(TypeError)
    expect(() => zclId.attrType(5, NaN)).toThrowError(TypeError)
    expect(() => zclId.attrType(5, [])).toThrowError(TypeError)
    expect(() => zclId.attrType(5, {})).toThrowError(TypeError)
    expect(() => zclId.attrType(5, true)).toThrowError(TypeError)
    expect(() => zclId.attrType(5, new Date())).toThrowError(TypeError)
    expect(() => zclId.attrType(5, () => {})).toThrowError(TypeError)

    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType("5", undefined)).toThrowError(TypeError)
    expect(() => zclId.attrType("5", null)).toThrowError(TypeError)
    expect(() => zclId.attrType("5", NaN)).toThrowError(TypeError)
    expect(() => zclId.attrType("5", [])).toThrowError(TypeError)
    expect(() => zclId.attrType("5", {})).toThrowError(TypeError)
    expect(() => zclId.attrType("5", true)).toThrowError(TypeError)
    expect(() => zclId.attrType("5", new Date())).toThrowError(TypeError)
    expect(() => zclId.attrType("5", () => {})).toThrowError(TypeError)

    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, undefined)).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, null)).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, NaN)).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, [])).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, {})).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, true)).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, new Date())).toThrowError(TypeError)
    expect(() => zclId.attrType(0x0005, () => {})).toThrowError(TypeError)

    expect(() => zclId.attrType()).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", undefined)).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", null)).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", NaN)).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", [])).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", {})).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", true)).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", new Date())).toThrowError(TypeError)
    expect(() => zclId.attrType("genScenes", () => {})).toThrowError(TypeError)

    expect(() => zclId.attrType(5, 2)).not.toThrowError(Error)
    expect(() => zclId.attrType(5, "2")).not.toThrowError(Error)
    expect(() => zclId.attrType(5, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType(5, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attrType("5", 2)).not.toThrowError(Error)
    expect(() => zclId.attrType("5", "2")).not.toThrowError(Error)
    expect(() => zclId.attrType("5", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType("5", "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, 2)).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, "2")).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType(0x0005, "currentGroup")).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", 2)).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", "2")).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", 0x0002)).not.toThrowError(Error)
    expect(() => zclId.attrType("genScenes", "currentGroup")).not.toThrowError(Error)
  })
})

describe("#.dataType", () => {
  it("should be a function", () => {
    expect(typeof zclId.dataType).toBe("function")
  })

  it("should throw TypeError if input type is not a number and not a string", () => {
    expect(() => zclId.dataType()).toThrowError(TypeError)
    expect(() => zclId.dataType(undefined)).toThrowError(TypeError)
    expect(() => zclId.dataType(null)).toThrowError(TypeError)
    expect(() => zclId.dataType(NaN)).toThrowError(TypeError)
    expect(() => zclId.dataType([])).toThrowError(TypeError)
    expect(() => zclId.dataType({})).toThrowError(TypeError)
    expect(() => zclId.dataType(true)).toThrowError(TypeError)
    expect(() => zclId.dataType(new Date())).toThrowError(TypeError)
    expect(() => zclId.dataType(() => {})).toThrowError(TypeError)

    expect(() => zclId.dataType(11)).not.toThrowError(Error)
    expect(() => zclId.dataType("11")).not.toThrowError(Error)
    expect(() => zclId.dataType(0x0b)).not.toThrowError(Error)
    expect(() => zclId.dataType("0x0b")).not.toThrowError(Error)
    expect(() => zclId.dataType("DATA32")).not.toThrowError(Error)
  })
})
