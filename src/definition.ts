export const stdTypeMapping: {
  data8: "uint8"
  boolean: "uint8"
  bitmap8: "uint8"
  uint8: "uint8"
  enum8: "uint8"
  int8: "int8"
  data16: "uint16"
  bitmap16: "uint16"
  uint16: "uint16"
  enum16: "uint16"
  clusterId: "uint16"
  attrId: "uint16"
  int16: "int16"
  semiPrec: undefined
  data24: "uint24"
  bitmap24: "uint24"
  uint24: "uint24"
  int24: "int24"
  data32: "uint32"
  bitmap32: "uint32"
  uint32: "uint32"
  tod: "uint32"
  date: "uint32"
  utc: "uint32"
  bacOid: "uint32"
  int32: "int32"
  singlePrec: "floatle"
  doubleprec: "doublele"
  uint40: "uint40"
  bitmap40: "uint40"
  data40: "uint40"
  int40: "int40"
  uint48: "uint48"
  bitmap48: "uint48"
  int48: "int48"
  data48: "uint48"
  uint56: "uint56"
  bitmap56: "uint56"
  data56: "uint56"
  int56: "int56"
  uint64: "uint64"
  bitmap64: "uint64"
  data64: "uint64"
  ieeeAddr: "uint64"
  int64: "int64"
  octetStr: "strPreLenUint8"
  charStr: "strPreLenUint8"
  longOctetStr: "strPreLenUint16"
  longCharStr: "strPreLenUint16"
  struct: "attrValStruct"
  noData: undefined
  unknown: undefined
  secKey: "secKey"
} = {
  data8: "uint8",
  boolean: "uint8",
  bitmap8: "uint8",
  uint8: "uint8",
  enum8: "uint8",
  int8: "int8",
  data16: "uint16",
  bitmap16: "uint16",
  uint16: "uint16",
  enum16: "uint16",
  clusterId: "uint16",
  attrId: "uint16",
  int16: "int16",
  semiPrec: undefined,
  data24: "uint24",
  bitmap24: "uint24",
  uint24: "uint24",
  int24: "int24",
  data32: "uint32",
  bitmap32: "uint32",
  uint32: "uint32",
  tod: "uint32",
  date: "uint32",
  utc: "uint32",
  bacOid: "uint32",
  int32: "int32",
  singlePrec: "floatle",
  doubleprec: "doublele",
  uint40: "uint40",
  bitmap40: "uint40",
  data40: "uint40",
  int40: "int40",
  uint48: "uint48",
  bitmap48: "uint48",
  int48: "int48",
  data48: "uint48",
  uint56: "uint56",
  bitmap56: "uint56",
  data56: "uint56",
  int56: "int56",
  uint64: "uint64",
  bitmap64: "uint64",
  data64: "uint64",
  ieeeAddr: "uint64",
  int64: "int64",
  octetStr: "strPreLenUint8",
  charStr: "strPreLenUint8",
  longOctetStr: "strPreLenUint16",
  longCharStr: "strPreLenUint16",
  struct: "attrValStruct",
  noData: undefined,
  unknown: undefined,
  secKey: "secKey"
}

export const zclTypes: {
  noData: 0
  data8: 8
  data16: 9
  data24: 10
  data32: 11
  data40: 12
  data48: 13
  data56: 14
  data64: 15
  boolean: 16
  bitmap8: 24
  bitmap16: 25
  bitmap24: 26
  bitmap32: 27
  bitmap40: 28
  bitmap48: 29
  bitmap56: 30
  bitmap64: 31
  uint8: 32
  uint16: 33
  uint24: 34
  uint32: 35
  uint40: 36
  uint48: 37
  uint56: 38
  uint64: 39
  int8: 40
  int16: 41
  int24: 42
  int32: 43
  int40: 44
  int48: 45
  int56: 46
  int64: 47
  enum8: 48
  enum16: 49
  semiPrec: 56
  singlePrec: 57
  doublePrec: 58
  octetStr: 65
  charStr: 66
  longOctetStr: 67
  longCharStr: 68
  array: 72
  struct: 76
  set: 80
  bag: 81
  tod: 224
  date: 225
  utc: 226
  clusterId: 232
  attrId: 233
  bacOid: 234
  ieeeAddr: 240
  secKey: 241
  unknown: 255
} = {
  noData: 0,
  data8: 8,
  data16: 9,
  data24: 10,
  data32: 11,
  data40: 12,
  data48: 13,
  data56: 14,
  data64: 15,
  boolean: 16,
  bitmap8: 24,
  bitmap16: 25,
  bitmap24: 26,
  bitmap32: 27,
  bitmap40: 28,
  bitmap48: 29,
  bitmap56: 30,
  bitmap64: 31,
  uint8: 32,
  uint16: 33,
  uint24: 34,
  uint32: 35,
  uint40: 36,
  uint48: 37,
  uint56: 38,
  uint64: 39,
  int8: 40,
  int16: 41,
  int24: 42,
  int32: 43,
  int40: 44,
  int48: 45,
  int56: 46,
  int64: 47,
  enum8: 48,
  enum16: 49,
  semiPrec: 56,
  singlePrec: 57,
  doublePrec: 58,
  octetStr: 65,
  charStr: 66,
  longOctetStr: 67,
  longCharStr: 68,
  array: 72,
  struct: 76,
  set: 80,
  bag: 81,
  tod: 224,
  date: 225,
  utc: 226,
  clusterId: 232,
  attrId: 233,
  bacOid: 234,
  ieeeAddr: 240,
  secKey: 241,
  unknown: 255
}
const typeNameLookup = new Map()
for (const [name, id] of Object.entries(zclTypes)) {
  typeNameLookup.set(id, name)
}
type Entries<T> = { [K in keyof T]: [K, T[K]] }
type Values<T> = T[keyof T]
type ByValue<T, V> = Extract<Values<Entries<T>>, [any, V]>[0]
export const zclTypeName = <T extends Values<typeof zclTypes> | number>(
  id: T
) => {
  const name = typeNameLookup.get(id)
  if (name) return name as ByValue<typeof zclTypes, T>
  throw new Error(
    `No Zigbee datatype with id${id.toString &&
      " 0x" + id.toString(16)} (${id})`
  )
}
